<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="com.albusxing.showcase.mapper.SysUserMapper">


    <!-- 查询所有 -->
    <select id="selectAll" resultType="SysUser">
        SELECT id, user_name, user_password, user_email, user_info, head_img, create_time
        FROM sys_user
    </select>

    <!-- 根据用户名模糊查询 -->
    <select id="selectLikeUserName" resultType="SysUser">
        SELECT id, user_name, user_password, user_email, user_info, head_img, create_time
        FROM sys_user
        Where user_name LIKE concat('%', #{userName}, '%')
    </select>

    <!-- 根据主键查询 -->
    <select id="selectById" resultType="SysUser">
        SELECT id, user_name, user_password, user_email, user_info, head_img, create_time
        FROM sys_user
        WHERE id = #{id}
    </select>


    <!-- 新增用户 -->
    <insert id="insert">
        INSERT INTO sys_user (id, user_name, user_password, user_email, user_info, head_img, create_time)
        VALUES (#{id}, #{userName}, #{userPassword}, #{userEmail}, #{userInfo}, #{headImg, jdbcType=BLOB},
                #{createTime, jdbcType=TIMESTAMP})
    </insert>

    <!-- 新增用户返回主键 使用 useGeneratedKeys -->
    <insert id="insert_useGeneratedKeys" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO sys_user (id, user_name, user_password, user_email, user_info, head_img, create_time)
        VALUES (#{id}, #{userName}, #{userPassword}, #{userEmail}, #{userInfo}, #{headImg, jdbcType=BLOB},
                #{createTime, jdbcType=TIMESTAMP})
    </insert>

    <!-- 新增用户返回主键 使用 selectKey -->
    <insert id="insert_selectKey">
        INSERT INTO sys_user (id, user_name, user_password, user_email, user_info, head_img, create_time)
        VALUES (#{id}, #{userName}, #{userPassword}, #{userEmail}, #{userInfo}, #{headImg, jdbcType=BLOB},
        #{createTime, jdbcType=TIMESTAMP})
        <selectKey keyProperty="id" resultType="long" keyColumn="id" order="AFTER">
            select last_insert_id()
        </selectKey>
    </insert>


    <!-- 根据 主键修改对象 -->
    <!-- 这种修改方式对象中为 null 的属性，数据库也会变成 null -->
    <!-- 使用这个的前提是 先查询出数据，再进行修改 -->
    <update id="updateById">
        UPDATE sys_user
        SET user_name     = #{userName},
            user_password = #{userPassword},
            user_email    = #{userEmail},
            user_info     = #{userInfo},
            head_img      = #{headImg, jdbcType=BLOB},
            create_time   = #{createTime, jdbcType=TIMESTAMP}
        WHERE id = #{id}
    </update>

    <!-- 删除 -->
    <delete id="deleteById">
        delete
        from sys_user
        where id = #{id}
    </delete>


    <!-- 根据用户名 或 用户邮箱 动态查询 -->
    <select id="selectByUserNameOrEmail" parameterType="SysUser" resultType="SysUser">
        SELECT id, user_name, user_password, user_email, user_info, head_img, create_time
        FROM sys_user
        <where>
            <if test="userName != null and userName != '' ">
                and user_name LIKE concat('%', #{userName}, '%')
            </if>
            <if test="userEmail != null and userEmail != '' ">
                and user_email LIKE concat('%', #{userEmail}, '%')
            </if>
        </where>
    </select>

    <!-- 根据用户id or 用户name 动态查询-->
    <select id="selectByIdOrUserName" resultType="SysUser">
        SELECT id, user_name, user_password, user_email, user_info, head_img, create_time
        FROM sys_user
        WHERE 1 = 1
        <choose>
            <when test="id != null">
                and id = #{id}
            </when>
            <when test=" userName != null and userName != ''">
                and user_name = #{userName}
            </when>
            <otherwise>
                and 1 = 2
            </otherwise>
        </choose>
    </select>

    <!-- 根据 id 集合查询 -->
    <select id="selectByIdList" resultType="SysUser">
        SELECT id, user_name, user_password, user_email, user_info, head_img, create_time
        FROM sys_user
        <where>
            <if test="idList != null and idList.size() > 0">
                id in
                <foreach collection="idList" open="(" close=")" separator=","
                         item="id" index="i">
                    #{id}
                </foreach>
            </if>
        </where>
    </select>

    <!-- 动态新增用户 -->
    <insert id="insertSelective">
        INSERT INTO sys_user (
        user_name, user_password,
        <if test="userEmail != null and userEmail != ''">
            user_email,
        </if>
        user_info, head_img, create_time)
        VALUES (
        #{userName}, #{userPassword},
        <if test="userEmail != null and userEmail != ''">
            #{userEmail},
        </if>
        #{userInfo}, #{headImg, jdbcType=BLOB},
        #{createTime, jdbcType=TIMESTAMP})
    </insert>

    <!-- 批量插入, 并且返回每条记录的id  -->
    <insert id="insertByList" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO sys_user (
        user_name, user_password,
        user_email,
        user_info, head_img, create_time)
        VALUES
        <foreach collection="sysUserList" item="user" separator=",">
            (
            #{user.userName}, #{user.userPassword},
            #{user.userEmail},
            #{user.userInfo}, #{user.headImg, jdbcType=BLOB},
            #{user.createTime, jdbcType=TIMESTAMP}
            )
        </foreach>
    </insert>


    <!-- 动态根据属性进行修改 -->
    <update id="updateByIdSelective" parameterType="SysUser">
        UPDATE sys_user
        <set>
            <if test="userName != null and userName != '' ">
                user_name = #{userName},
            </if>
            <if test="userPassword != null and userPassword != '' ">
                user_password = #{userPassword},
            </if>
            <if test="userEmail != null and userEmail != '' ">
                user_email = #{userEmail},
            </if>
            <if test="userInfo != null and userInfo != '' ">
                user_info = #{userInfo},
            </if>
            <if test="headImg != null and headImg != '' ">
                head_img = #{headImg},
            </if>
            <if test="createTime != null and createTime != '' ">
                create_time = #{createTime}
            </if>
            id = #{id}
        </set>
        WHERE id = #{id}

    </update>


    <!-- 根据 id 集合查询 -->
    <delete id="deleteByIdList">
        DELETE
        FROM sys_user
        <where>
            <if test="idList != null and idList.size() > 0">
                <foreach collection="idList" open=" id in (" close=")" separator=","
                         item="id" index="i">
                    #{id}
                </foreach>
            </if>
        </where>
    </delete>


</mapper>